"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _paragon = require("@edx/paragon");
var _icons = require("@edx/paragon/icons");
var _thunks = require("../../data/thunks");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const MessageForm = _ref => {
  let {
    courseId,
    shouldAutofocus
  } = _ref;
  const {
    apiIsLoading,
    currentMessage,
    apiError
  } = (0, _reactRedux.useSelector)(state => state.learningAssistant);
  const dispatch = (0, _reactRedux.useDispatch)();
  const inputRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    if (inputRef.current && !apiError && !apiIsLoading && shouldAutofocus) {
      inputRef.current.focus();
    }
  }, [apiError, apiIsLoading, shouldAutofocus]);
  const handleSubmitMessage = event => {
    event.preventDefault();
    if (currentMessage) {
      dispatch((0, _thunks.acknowledgeDisclosure)(true));
      dispatch((0, _thunks.addChatMessage)('user', currentMessage, courseId));
      dispatch((0, _thunks.getChatResponse)(courseId));
    }
  };
  const handleUpdateCurrentMessage = event => {
    dispatch((0, _thunks.updateCurrentMessage)(event.target.value));
  };
  const getSubmitButton = () => /*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.Button, {
    "aria-label": "submit",
    disabled: apiIsLoading,
    onClick: handleSubmitMessage,
    size: "inline",
    variant: "tertiary",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.Icon, {
      src: _icons.Send
    })
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.Form, {
    className: "w-100 pl-2",
    onSubmit: handleSubmitMessage,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.Form.Group, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.Form.Control, {
        "data-hj-suppress": true,
        disabled: apiIsLoading,
        floatingLabel: "Write a message",
        onChange: handleUpdateCurrentMessage,
        trailingElement: getSubmitButton(),
        value: currentMessage,
        ref: inputRef
      })
    })
  });
};
MessageForm.propTypes = {
  courseId: _propTypes.default.string.isRequired,
  shouldAutofocus: _propTypes.default.bool
};
MessageForm.defaultProps = {
  shouldAutofocus: false
};
var _default = MessageForm;
exports.default = _default;
//# sourceMappingURL=index.js.map