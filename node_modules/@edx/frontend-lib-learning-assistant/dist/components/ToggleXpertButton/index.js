"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _analytics = require("@edx/frontend-platform/analytics");
var _auth = require("@edx/frontend-platform/auth");
var _paragon = require("@edx/paragon");
var _icons = require("@edx/paragon/icons");
var _xpertLogo = require("../../assets/xpert-logo.svg");
var _optimizelyExperiment = require("../../utils/optimizelyExperiment");
require("./index.scss");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ToggleXpert = _ref => {
  let {
    isOpen,
    setIsOpen,
    courseId,
    contentToolsEnabled
  } = _ref;
  const [hasDismissed, setHasDismissed] = (0, _react.useState)(false);
  const [showProductTourExp, setShowProductTourExp] = (0, _react.useState)(false);
  const {
    userId
  } = (0, _auth.getAuthenticatedUser)();
  (0, _react.useEffect)(() => {
    const showProductTour = (0, _optimizelyExperiment.activateProductTourExperiment)(userId.toString());
    setShowProductTourExp(showProductTour);
  }, [userId, setShowProductTourExp]);
  const handleClick = event => {
    // log event if the tool is opened
    if (!isOpen) {
      (0, _analytics.sendTrackEvent)('edx.ui.lms.learning_assistant.launch', {
        course_id: courseId,
        user_id: userId,
        source: event.target.id === 'toggle-button' ? 'toggle' : 'cta'
      });
      (0, _optimizelyExperiment.trackChatBotLaunchOptimizely)(userId.toString());
    }
    setIsOpen(!isOpen);
  };
  const handleDismiss = event => {
    // prevent default and propagation to prevent sidebar from opening
    event.preventDefault();
    event.stopPropagation();
    setHasDismissed(true);
    (0, _analytics.sendTrackEvent)('edx.ui.lms.learning_assistant.dismiss_action_message', {
      course_id: courseId
    });
  };
  const handleProductTourEnd = () => {
    setIsOpen(true);
    localStorage.setItem('completedLearningAssistantTour', 'true');
    (0, _analytics.sendTrackEvent)('edx.ui.lms.learning_assistant.launch', {
      course_id: courseId,
      user_id: userId,
      source: 'product-tour'
    });
    (0, _optimizelyExperiment.trackChatBotLaunchOptimizely)(userId.toString());
  };
  const learningAssistantTour = {
    tourId: 'learningAssistantTour',
    endButtonText: 'Check it out',
    onEnd: () => {
      handleProductTourEnd();
    },
    enabled: !localStorage.getItem('completedLearningAssistantTour') && showProductTourExp,
    checkpoints: [{
      placement: 'left',
      target: '#cta-button',
      body: 'Xpert is a new part of your learning experience. ' + 'You can ask questions and get tutoring help during your course.'
    }]
  };
  return !isOpen && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.ProductTour, {
      tours: [learningAssistantTour]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: `toggle closed d-flex flex-column position-fixed justify-content-end align-items-end mx-3 border-0 
          ${contentToolsEnabled ? 'chat-content-tools-margin' : ''}`,
      children: [!hasDismissed && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "d-flex justify-content-end flex-row ",
        "data-testid": "action-message",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.IconButton, {
          src: _icons.Close,
          iconAs: _paragon.Icon,
          alt: "dismiss",
          onClick: handleDismiss,
          variant: "light",
          className: "dismiss-button mx-2 mt-1 bg-gray",
          size: "sm"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          className: "action-message open-negative-margin p-3 mb-4.5",
          "data-testid": "message-button",
          onClick: handleClick,
          "aria-label": "Can I answer any questions for you?",
          type: "button",
          id: "cta-button",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: "Hi there! \uD83D\uDC4B I'm Xpert, an AI-powered assistant from edX who can help you with questions about this course."
          })
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.Button, {
        variant: "primary",
        className: "toggle button-icon",
        "data-testid": "toggle-button",
        onClick: handleClick,
        id: "toggle-button",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_xpertLogo.ReactComponent, {})
      })]
    })]
  });
};
ToggleXpert.propTypes = {
  isOpen: _propTypes.default.bool.isRequired,
  setIsOpen: _propTypes.default.func.isRequired,
  courseId: _propTypes.default.string.isRequired,
  contentToolsEnabled: _propTypes.default.bool.isRequired
};
var _default = ToggleXpert;
exports.default = _default;
//# sourceMappingURL=index.js.map