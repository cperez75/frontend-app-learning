"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _analytics = require("@edx/frontend-platform/analytics");
var _paragon = require("@edx/paragon");
var _icons = require("@edx/paragon/icons");
var _APIError = _interopRequireDefault(require("../APIError"));
var _ChatBox = _interopRequireDefault(require("../ChatBox"));
var _Disclosure = _interopRequireDefault(require("../Disclosure"));
var _MessageForm = _interopRequireDefault(require("../MessageForm"));
require("./Sidebar.scss");
var _thunks = require("../../data/thunks");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Sidebar = _ref => {
  let {
    courseId,
    isOpen,
    setIsOpen
  } = _ref;
  const {
    apiError,
    disclosureAcknowledged,
    messageList
  } = (0, _reactRedux.useSelector)(state => state.learningAssistant);
  const chatboxContainerRef = (0, _react.useRef)(null);
  const dispatch = (0, _reactRedux.useDispatch)();

  // this use effect is intended to scroll to the bottom of the chat window, in the case
  // that a message is larger than the chat window height.
  (0, _react.useEffect)(() => {
    const messageContainer = chatboxContainerRef.current;
    if (messageContainer) {
      const {
        scrollHeight,
        clientHeight
      } = messageContainer;
      const maxScrollTop = scrollHeight - clientHeight;
      const duration = 200;
      if (maxScrollTop > 0) {
        const startTime = Date.now();
        const endTime = startTime + duration;
        const scroll = () => {
          const currentTime = Date.now();
          const timeFraction = (currentTime - startTime) / duration;
          const scrollTop = maxScrollTop * timeFraction;
          messageContainer.scrollTo({
            top: scrollTop,
            behavior: 'smooth'
          });
          if (currentTime < endTime) {
            requestAnimationFrame(scroll);
          }
        };
        requestAnimationFrame(scroll);
      }
    }
  }, [messageList, isOpen, apiError]);
  const handleClick = () => {
    setIsOpen(false);

    // check to see if hotjar is available, then trigger hotjar event
    const hasWindow = typeof window !== 'undefined';
    if (hasWindow && window.hj) {
      window.hj('event', 'ocm_learning_assistant_chat_closed');
    }
  };
  const handleClearMessages = () => {
    dispatch((0, _thunks.clearMessages)());
    (0, _analytics.sendTrackEvent)('edx.ui.lms.learning_assistant.clear', {
      course_id: courseId
    });
  };
  const getSidebar = () => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "h-100 d-flex flex-column justify-content-stretch",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "d-flex flex-column align-items-center p-3",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
        className: "font-weight-bold mb-3",
        children: "Hi, I'm Xpert!"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
        className: "px-3 mb-0 text-center",
        children: "Stuck on a concept? Need more clarification on a complicated topic? Let's chat!"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: "separator"
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChatBox.default, {
      chatboxContainerRef: chatboxContainerRef,
      messageList: messageList
    }), apiError && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "d-flex flex-column p-3 mt-auto",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_APIError.default, {})
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_MessageForm.default, {
      courseId: courseId,
      shouldAutofocus: true
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "d-flex justify-content-start",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.Button, {
        className: "clear mx-2 mb-2 border-0",
        onClick: handleClearMessages,
        "aria-label": "clear",
        variant: "primary",
        type: "button",
        children: "Clear"
      })
    })]
  });
  return isOpen && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "sidebar position-fixed",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_paragon.IconButton, {
      className: "chat-close position-absolute m-2 border-0",
      src: _icons.Close,
      iconAs: _paragon.Icon,
      "data-testid": "close-button",
      onClick: handleClick,
      "aria-label": "close",
      variant: "primary",
      invertColors: !disclosureAcknowledged
    }), disclosureAcknowledged ? getSidebar() : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Disclosure.default, {
      courseId: courseId
    })]
  });
};
Sidebar.propTypes = {
  courseId: _propTypes.default.string.isRequired,
  isOpen: _propTypes.default.bool.isRequired,
  setIsOpen: _propTypes.default.func.isRequired
};
var _default = Sidebar;
exports.default = _default;
//# sourceMappingURL=index.js.map