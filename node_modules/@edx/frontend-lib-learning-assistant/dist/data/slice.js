"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSidebarIsOpen = exports.setMessageList = exports.setDisclosureAcknowledged = exports.setCurrentMessage = exports.setApiIsLoading = exports.setApiError = exports.resetMessages = exports.resetApiError = exports.reducer = exports.learningAssistantSlice = exports.clearCurrentMessage = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _uuid = require("uuid");
/* eslint-disable no-param-reassign */

const learningAssistantSlice = (0, _toolkit.createSlice)({
  name: 'learning-assistant',
  initialState: {
    currentMessage: '',
    messageList: [],
    apiError: false,
    apiIsLoading: false,
    conversationId: (0, _uuid.v4)(),
    disclosureAcknowledged: false,
    sidebarIsOpen: false
  },
  reducers: {
    setCurrentMessage: (state, _ref) => {
      let {
        payload
      } = _ref;
      state.currentMessage = payload.currentMessage;
    },
    clearCurrentMessage: state => {
      state.currentMessage = '';
    },
    setMessageList: (state, _ref2) => {
      let {
        payload
      } = _ref2;
      state.messageList = payload.messageList;
    },
    resetMessages: state => {
      state.currentMessage = '';
      state.messageList = [];
      state.apiError = false;
    },
    setApiError: state => {
      state.apiError = true;
    },
    resetApiError: state => {
      state.apiError = false;
    },
    setApiIsLoading: (state, _ref3) => {
      let {
        payload
      } = _ref3;
      state.apiIsLoading = payload;
    },
    setDisclosureAcknowledged: (state, _ref4) => {
      let {
        payload
      } = _ref4;
      state.disclosureAcknowledged = payload;
    },
    setSidebarIsOpen: (state, _ref5) => {
      let {
        payload
      } = _ref5;
      state.sidebarIsOpen = payload;
    }
  }
});
exports.learningAssistantSlice = learningAssistantSlice;
const {
  setCurrentMessage,
  clearCurrentMessage,
  setMessageList,
  resetMessages,
  setApiError,
  setApiIsLoading,
  resetApiError,
  setDisclosureAcknowledged,
  setSidebarIsOpen
} = learningAssistantSlice.actions;
exports.setSidebarIsOpen = setSidebarIsOpen;
exports.setDisclosureAcknowledged = setDisclosureAcknowledged;
exports.resetApiError = resetApiError;
exports.setApiIsLoading = setApiIsLoading;
exports.setApiError = setApiError;
exports.resetMessages = resetMessages;
exports.setMessageList = setMessageList;
exports.clearCurrentMessage = clearCurrentMessage;
exports.setCurrentMessage = setCurrentMessage;
const {
  reducer
} = learningAssistantSlice;
exports.reducer = reducer;
//# sourceMappingURL=slice.js.map