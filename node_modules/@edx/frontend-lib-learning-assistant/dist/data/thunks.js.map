{"version":3,"file":"thunks.js","names":["_analytics","require","_auth","_api","_interopRequireDefault","_slice","_optimizelyExperiment","obj","__esModule","default","addChatMessage","role","content","courseId","dispatch","getState","messageList","conversationId","learningAssistant","timestamp","Date","message","toString","updatedMessageList","setMessageList","clearCurrentMessage","resetApiError","userId","getAuthenticatedUser","sendTrackEvent","id","course_id","user_id","trackChatBotMessageOptimizely","getChatResponse","setApiIsLoading","fetchChatResponse","error","setApiError","clearMessages","resetMessages","updateCurrentMessage","setCurrentMessage","currentMessage","clearApiError","acknowledgeDisclosure","isDisclosureAcknowledged","setDisclosureAcknowledged","updateSidebarIsOpen","isOpen","setSidebarIsOpen"],"sources":["../../src/data/thunks.js"],"sourcesContent":["import { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport fetchChatResponse from './api';\nimport {\n  setCurrentMessage,\n  clearCurrentMessage,\n  resetMessages,\n  setMessageList,\n  setApiError,\n  setApiIsLoading,\n  resetApiError,\n  setDisclosureAcknowledged,\n  setSidebarIsOpen,\n} from './slice';\nimport { trackChatBotMessageOptimizely } from '../utils/optimizelyExperiment';\n\nexport function addChatMessage(role, content, courseId) {\n  return (dispatch, getState) => {\n    const { messageList, conversationId } = getState().learningAssistant;\n\n    // Redux recommends only serializable values in the store, so we'll stringify the timestap to store in Redux.\n    // When we need to operate on the Date object, we'll deserialize the string.\n    const timestamp = new Date();\n\n    const message = {\n      role,\n      content,\n      timestamp: timestamp.toString(),\n    };\n    const updatedMessageList = [...messageList, message];\n    dispatch(setMessageList({ messageList: updatedMessageList }));\n    dispatch(clearCurrentMessage());\n    dispatch(resetApiError());\n\n    const { userId } = getAuthenticatedUser();\n    sendTrackEvent('edx.ui.lms.learning_assistant.message', {\n      id: conversationId,\n      course_id: courseId,\n      user_id: userId,\n      timestamp: message.timestamp,\n      role: message.role,\n      content: message.content,\n    });\n\n    if (message.role === 'user') {\n      trackChatBotMessageOptimizely(userId.toString());\n    }\n  };\n}\n\nexport function getChatResponse(courseId) {\n  return async (dispatch, getState) => {\n    const { messageList } = getState().learningAssistant;\n\n    dispatch(setApiIsLoading(true));\n    try {\n      const message = await fetchChatResponse(courseId, messageList);\n      dispatch(setApiIsLoading(false));\n      dispatch(addChatMessage(message.role, message.content, courseId));\n    } catch (error) {\n      dispatch(setApiError());\n      dispatch(setApiIsLoading(false));\n    }\n  };\n}\n\nexport function clearMessages() {\n  return (dispatch) => {\n    dispatch(resetMessages());\n    dispatch(resetApiError());\n  };\n}\n\nexport function updateCurrentMessage(content) {\n  return (dispatch) => {\n    dispatch(setCurrentMessage({ currentMessage: content }));\n  };\n}\n\nexport function clearApiError() {\n  return (dispatch) => {\n    dispatch(resetApiError());\n  };\n}\n\nexport function acknowledgeDisclosure(isDisclosureAcknowledged) {\n  return (dispatch) => {\n    dispatch(setDisclosureAcknowledged(isDisclosureAcknowledged));\n  };\n}\n\nexport function updateSidebarIsOpen(isOpen) {\n  return (dispatch) => {\n    dispatch(setSidebarIsOpen(isOpen));\n  };\n}\n"],"mappings":"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"}